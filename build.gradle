/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = 'https://jcenter.bintray.com'
    }

    maven {
        url = 'https://repository.apache.org/snapshots'
    }
}

dependencies {
    testImplementation 'junit:junit:3.8.1'
}

group = 'commons-daemon'
version = '1.2.2'
description = 'Apache Commons Daemon'
sourceCompatibility = '1.6'

configurations.all {
}

task testsJar(type: Jar) {
    archiveClassifier = 'tests'
    from(sourceSets.test.output)
}

java {
    withSourcesJar()
}

task buildNatives {
    dependsOn build
}

def generateBuildNativeTask(String arch) {
    return tasks.create(
            name: "buildNative${arch}",
            dependsOn: 'buildNatives'
    ) {
        String cmakeExecutable = System.getenv().getOrDefault("CMAKE_EXECUTABLE", "cmake");
        File nativeBuildDir = file("${buildDir}/native-build" + arch)
        File nativeOutDir = file("${buildDir}/native/" + arch)
        String nativeSrcDir = project.file("src/native")

        println("cmakeExecutable = ${cmakeExecutable}")
        println("path = ${nativeSrcDir}")

        nativeBuildDir.mkdirs();
        nativeOutDir.mkdirs();

        project.exec {
            workingDir(nativeBuildDir)
            commandLine(
                    cmakeExecutable,
                    "${nativeSrcDir}",
                    "-DCMAKE_INSTALL_PREFIX=" + nativeOutDir.absolutePath
            )
            standardOutput = System.out
            errorOutput = System.err
        }
        project.exec {
            workingDir(nativeBuildDir)
            commandLine(
                    cmakeExecutable,
                    "--build", ".", "--config", "Release"
            )
            standardOutput = System.out
            errorOutput = System.err
        }
        project.exec {
            workingDir(nativeBuildDir)
            commandLine(
                    cmakeExecutable,
                    "--install", "."
            )
            standardOutput = System.out
            errorOutput = System.err
        }
    }
}

def availableArchs = ["Win32", "x64"]
availableArchs.each({
    v -> generateBuildNativeTask v
})

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
            artifact(testsJar)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'iso-8859-1'
}
